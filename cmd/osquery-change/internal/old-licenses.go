// Code generated by go-bindata. DO NOT EDIT.
// sources:
// internal/old-licenses/c1
// internal/old-licenses/c2
// internal/old-licenses/c3
// internal/old-licenses/c4
// internal/old-licenses/c5
// internal/old-licenses/c6
// internal/old-licenses/c7
// internal/old-licenses/c8
// internal/old-licenses/c9
// internal/old-licenses/sh1
// internal/old-licenses/sh2
// internal/old-licenses/sh3
package internal

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalOldLicensesC1 = []byte(`/**
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed in accordance with the terms specified in
 *  the LICENSE file found in the root directory of this source tree.
 */
`)

func internalOldLicensesC1Bytes() ([]byte, error) {
	return _internalOldLicensesC1, nil
}

func internalOldLicensesC1() (*asset, error) {
	bytes, err := internalOldLicensesC1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/c1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesC2 = []byte(`/**
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed as defined on the LICENSE file found in the
 *  root directory of this source tree.
 */
`)

func internalOldLicensesC2Bytes() ([]byte, error) {
	return _internalOldLicensesC2, nil
}

func internalOldLicensesC2() (*asset, error) {
	bytes, err := internalOldLicensesC2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/c2", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesC3 = []byte(`// Copyright 2004-present Facebook. All Rights Reserved.
`)

func internalOldLicensesC3Bytes() ([]byte, error) {
	return _internalOldLicensesC3, nil
}

func internalOldLicensesC3() (*asset, error) {
	bytes, err := internalOldLicensesC3Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/c3", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesC4 = []byte(`/**
 *  Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
 *
 *  This source code is licensed in accordance with the terms specified in
 *  the LICENSE file found in the root directory of this source tree.
 */
`)

func internalOldLicensesC4Bytes() ([]byte, error) {
	return _internalOldLicensesC4, nil
}

func internalOldLicensesC4() (*asset, error) {
	bytes, err := internalOldLicensesC4Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/c4", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesC5 = []byte(`/**
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under both the Apache 2.0 license (found in the
 *  LICENSE file in the root directory of this source tree) and the GPLv2 (found
 *  in the COPYING file in the root directory of this source tree).
 *  You may select, at your option, one of the above-listed licenses.
 */
`)

func internalOldLicensesC5Bytes() ([]byte, error) {
	return _internalOldLicensesC5, nil
}

func internalOldLicensesC5() (*asset, error) {
	bytes, err := internalOldLicensesC5Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/c5", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesC6 = []byte(`/*
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed in accordance with the terms specified in
 *  the LICENSE file found in the root directory of this source tree.
 */
`)

func internalOldLicensesC6Bytes() ([]byte, error) {
	return _internalOldLicensesC6, nil
}

func internalOldLicensesC6() (*asset, error) {
	bytes, err := internalOldLicensesC6Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/c6", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesC7 = []byte(`/*
 *
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed in accordance with the terms specified in
 *  the LICENSE file found in the root directory of this source tree.
 */

`)

func internalOldLicensesC7Bytes() ([]byte, error) {
	return _internalOldLicensesC7, nil
}

func internalOldLicensesC7() (*asset, error) {
	bytes, err := internalOldLicensesC7Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/c7", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesC8 = []byte(`// Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
`)

func internalOldLicensesC8Bytes() ([]byte, error) {
	return _internalOldLicensesC8, nil
}

func internalOldLicensesC8() (*asset, error) {
	bytes, err := internalOldLicensesC8Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/c8", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesC9 = []byte(`/**
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed in accordance with the terms specified in
 *  the LICENSE file found in the root directory of this source tree.
 */
`)

func internalOldLicensesC9Bytes() ([]byte, error) {
	return _internalOldLicensesC9, nil
}

func internalOldLicensesC9() (*asset, error) {
	bytes, err := internalOldLicensesC9Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/c9", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesSh1 = []byte(`# Copyright (c) 2014-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
`)

func internalOldLicensesSh1Bytes() ([]byte, error) {
	return _internalOldLicensesSh1, nil
}

func internalOldLicensesSh1() (*asset, error) {
	bytes, err := internalOldLicensesSh1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/sh1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesSh2 = []byte(`#  Copyright (c) 2014-present, Facebook, Inc.
#  All rights reserved.
#
#  This source code is licensed in accordance with the terms specified in
#  the LICENSE file found in the root directory of this source tree.
`)

func internalOldLicensesSh2Bytes() ([]byte, error) {
	return _internalOldLicensesSh2, nil
}

func internalOldLicensesSh2() (*asset, error) {
	bytes, err := internalOldLicensesSh2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/sh2", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalOldLicensesSh3 = []byte(`# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
`)

func internalOldLicensesSh3Bytes() ([]byte, error) {
	return _internalOldLicensesSh3, nil
}

func internalOldLicensesSh3() (*asset, error) {
	bytes, err := internalOldLicensesSh3Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/old-licenses/sh3", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/old-licenses/c1": internalOldLicensesC1,
	"internal/old-licenses/c2": internalOldLicensesC2,
	"internal/old-licenses/c3": internalOldLicensesC3,
	"internal/old-licenses/c4": internalOldLicensesC4,
	"internal/old-licenses/c5": internalOldLicensesC5,
	"internal/old-licenses/c6": internalOldLicensesC6,
	"internal/old-licenses/c7": internalOldLicensesC7,
	"internal/old-licenses/c8": internalOldLicensesC8,
	"internal/old-licenses/c9": internalOldLicensesC9,
	"internal/old-licenses/sh1": internalOldLicensesSh1,
	"internal/old-licenses/sh2": internalOldLicensesSh2,
	"internal/old-licenses/sh3": internalOldLicensesSh3,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"old-licenses": &bintree{nil, map[string]*bintree{
			"c1": &bintree{internalOldLicensesC1, map[string]*bintree{}},
			"c2": &bintree{internalOldLicensesC2, map[string]*bintree{}},
			"c3": &bintree{internalOldLicensesC3, map[string]*bintree{}},
			"c4": &bintree{internalOldLicensesC4, map[string]*bintree{}},
			"c5": &bintree{internalOldLicensesC5, map[string]*bintree{}},
			"c6": &bintree{internalOldLicensesC6, map[string]*bintree{}},
			"c7": &bintree{internalOldLicensesC7, map[string]*bintree{}},
			"c8": &bintree{internalOldLicensesC8, map[string]*bintree{}},
			"c9": &bintree{internalOldLicensesC9, map[string]*bintree{}},
			"sh1": &bintree{internalOldLicensesSh1, map[string]*bintree{}},
			"sh2": &bintree{internalOldLicensesSh2, map[string]*bintree{}},
			"sh3": &bintree{internalOldLicensesSh3, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

